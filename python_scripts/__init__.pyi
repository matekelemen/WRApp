from typing import Any, Dict, Iterator, List

from typing import overload
import Kratos
import os
ANALYSIS_PATH: Kratos.IntegerVariable

class CheckpointPattern(ModelPartPattern):
    def __init__(self, arg0: str) -> None: ...
    @overload
    def Apply(self, arg0: Dict[str,str]) -> str: ...
    @overload
    def Apply(self, arg0: Kratos.ModelPart, arg1: int) -> str: ...

class DiscreteIntervalUtility:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...
    def GetDefaultParameters(self) -> Kratos.Parameters: ...
    def GetIntervalBegin(self) -> int: ...
    def GetIntervalEnd(self) -> int: ...
    def IsInInterval(self, arg0: int) -> bool: ...

class IntervalUtility:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...
    def GetDefaultParameters(self) -> Kratos.Parameters: ...
    def GetIntervalBegin(self) -> float: ...
    def GetIntervalEnd(self) -> float: ...
    def IsInInterval(self, arg0: float) -> bool: ...

class Journal:
    @overload
    def __init__(self, arg0: os.PathLike) -> None: ...
    @overload
    def __init__(self, arg0: os.PathLike, arg1) -> None: ...
    def Clear(self) -> None: ...
    def EraseIf(self, arg0) -> None: ...
    def GetFilePath(self) -> os.PathLike: ...
    def Push(self, arg0: Kratos.Model) -> None: ...
    def SetExtractor(self, arg0) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class JournalBase:
    def __init__(self, arg0: os.PathLike) -> None: ...
    def Clear(self) -> None: ...
    def EraseIf(self, arg0) -> None: ...
    def GetFilePath(self) -> os.PathLike: ...
    def Push(self, arg0: Kratos.Model) -> None: ...
    def SetExtractor(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class ModelPartPattern(PlaceholderPattern):
    def __init__(self, arg0: str) -> None: ...
    @overload
    def Apply(self, arg0: Dict[str,str]) -> str: ...
    @overload
    def Apply(self, arg0: Kratos.ModelPart) -> str: ...
    def Glob(self) -> List[os.PathLike]: ...

class PlaceholderPattern:
    def __init__(self, arg0: str, arg1: Dict[str,str]) -> None: ...
    def Apply(self, arg0: Dict[str,str]) -> str: ...
    def GetRegexString(self) -> str: ...
    def IsAMatch(self, arg0: str) -> bool: ...
    def Match(self, arg0: str) -> Dict[str,List[str]]: ...

class WRApp(Kratos.KratosApplication):
    def __init__(self) -> None: ...

def MPIAllGatherVStrings(arg0: List[str], arg1: Kratos.DataCommunicator) -> List[str]: ...


#   ---- start of includes of python modules --- 

from WRApp import *
from _typeshed import Incomplete

application: Incomplete
application_name: str

#   ---- end of includes of python modules --- 

